@prefix fhir: <http://hl7.org/fhir/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# - resource -------------------------------------------------------------------

<http://hl7.org/fhir/CodeSystem/map-transform> a fhir:CodeSystem ;
  fhir:nodeRole fhir:treeRoot ;
  fhir:id [ fhir:v "map-transform"] ; # 
  fhir:meta [
     fhir:lastUpdated [ fhir:v "2025-10-24T20:27:59.321-04:00"^^xsd:dateTime ] ;
     fhir:profile ( [
       fhir:v "http://hl7.org/fhir/StructureDefinition/shareablecodesystem"^^xsd:anyURI ;
       fhir:link <http://hl7.org/fhir/StructureDefinition/shareablecodesystem>
     ] )
  ] ; # 
  fhir:text [
     fhir:status [ fhir:v "generated" ] ;
     fhir:div "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p class=\"res-header-id\"><b>Generated Narrative: CodeSystem map-transform</b></p><a name=\"map-transform\"> </a><a name=\"hcmap-transform\"> </a><div style=\"display: inline-block; background-color: #d9e0e7; padding: 6px; margin: 4px; border: 1px solid #8da1b4; border-radius: 5px; line-height: 60%\"><p style=\"margin-bottom: 0px\"/><p style=\"margin-bottom: 0px\">Profile: <a href=\"shareablecodesystem.html\">Shareable CodeSystem</a></p></div><p><b>Properties</b></p><p><b>This code system defines the following properties for its concepts</b></p><table class=\"grid\"><tr><td><b>Name</b></td><td><b>Code</b></td><td><b>Type</b></td><td><b>Description</b></td></tr><tr><td>FHIRPath Equivalent</td><td>fhirpath</td><td>string</td><td>FHIRPath equivalent for transform function</td></tr></table><p><b>Concepts</b></p><p>This case-sensitive code system <code>http://hl7.org/fhir/map-transform</code> defines the following codes:</p><table class=\"codes\"><tr><td style=\"white-space:nowrap\"><b>Code</b></td><td><b>Definition</b></td><td><b>FHIRPath Equivalent</b></td></tr><tr><td style=\"white-space:nowrap\">create<a name=\"map-transform-create\"> </a></td><td><div><p>create(type : string) - type is passed through to the application on the standard API, and must be known by it.</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">copy<a name=\"map-transform-copy\"> </a></td><td><div><p>copy(source).</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">truncate<a name=\"map-transform-truncate\"> </a></td><td><div><p>truncate(source, length) - source must be stringy type.</p>\n</div></td><td>substring</td></tr><tr><td style=\"white-space:nowrap\">escape<a name=\"map-transform-escape\"> </a></td><td><div><p>escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">cast<a name=\"map-transform-cast\"> </a></td><td><div><p>cast(source, type?) - cast (convert) source from one type to another. Target type can be left as implicit if there is one and only one target type known. The default namespace for the type is 'FHIR' (see <a href=\"http://hl7.org/fhirpath/N1/#is-type-specifier\">FHIRPath type specifiers</a>)</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">append<a name=\"map-transform-append\"> </a></td><td><div><p>append(source...) - source is element or string.</p>\n</div></td><td>&amp; (String concatenation)</td></tr><tr><td style=\"white-space:nowrap\">translate<a name=\"map-transform-translate\"> </a></td><td><div><p>translate(source, uri_of_map) - use the translate operation.</p>\n</div></td><td>%terminologies.translate()</td></tr><tr><td style=\"white-space:nowrap\">reference<a name=\"map-transform-reference\"> </a></td><td><div><p>reference(source : object) - return a string that references the provided tree properly.</p>\n</div></td><td>related to resolve() but returns the string pointer</td></tr><tr><td style=\"white-space:nowrap\">dateOp<a name=\"map-transform-dateOp\"> </a></td><td><div><p>Perform a date operation. <em>Parameters to be documented</em>.</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">uuid<a name=\"map-transform-uuid\"> </a></td><td><div><p>Generate a random UUID (in lowercase). No Parameters.</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">pointer<a name=\"map-transform-pointer\"> </a></td><td><div><p>Return the appropriate string to put in a reference that refers to the resource provided as a parameter.</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">evaluate<a name=\"map-transform-evaluate\"> </a></td><td><div><p>Execute the supplied FHIRPath expression and use the value returned by that.</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">cc<a name=\"map-transform-cc\"> </a></td><td><div><p>Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">c<a name=\"map-transform-c\"> </a></td><td><div><p>Create a Coding. Parameters = (system. Code[, display]).</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">qty<a name=\"map-transform-qty\"> </a></td><td><div><p>Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">id<a name=\"map-transform-id\"> </a></td><td><div><p>Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.</p>\n</div></td><td>n/a</td></tr><tr><td style=\"white-space:nowrap\">cp<a name=\"map-transform-cp\"> </a></td><td><div><p>Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.</p>\n</div></td><td>n/a</td></tr></table></div>"^^rdf:XMLLiteral
  ] ; # 
  fhir:extension ( [
     fhir:url [ fhir:v "http://hl7.org/fhir/StructureDefinition/structuredefinition-wg"^^xsd:anyURI ] ;
     fhir:value [
       a fhir:code ;
       fhir:v "fhir"
     ]
  ] [
     fhir:url [ fhir:v "http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status"^^xsd:anyURI ] ;
     fhir:value [
       a fhir:code ;
       fhir:v "trial-use"
     ]
  ] [
     fhir:url [ fhir:v "http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm"^^xsd:anyURI ] ;
     fhir:value [
       a fhir:integer ;
       fhir:v 2
     ]
  ] ) ; # 
  fhir:url [ fhir:v "http://hl7.org/fhir/map-transform"^^xsd:anyURI] ; # 
  fhir:identifier ( [
     fhir:system [ fhir:v "urn:ietf:rfc:3986"^^xsd:anyURI ] ;
     fhir:value [ fhir:v "urn:oid:2.16.840.1.113883.4.642.4.682" ]
  ] [
     fhir:use [ fhir:v "old" ] ;
     fhir:system [ fhir:v "urn:ietf:rfc:3986"^^xsd:anyURI ] ;
     fhir:value [ fhir:v "urn:oid:2.16.840.1.113883.4.642.1.668" ]
  ] ) ; # 
  fhir:version [ fhir:v "6.0.0-ballot3"] ; # 
  fhir:name [ fhir:v "StructureMapTransform"] ; # 
  fhir:title [ fhir:v "Structure Map Transform"] ; # 
  fhir:status [ fhir:v "active"] ; # 
  fhir:experimental [ fhir:v false] ; # 
  fhir:date [ fhir:v "2021-01-05T10:01:24+11:00"^^xsd:dateTime] ; # 
  fhir:publisher [ fhir:v "HL7 (FHIR Project)"] ; # 
  fhir:contact ( [
     fhir:telecom ( [
       fhir:system [ fhir:v "url" ] ;
       fhir:value [ fhir:v "http://hl7.org/fhir" ]
     ] [
       fhir:system [ fhir:v "email" ] ;
       fhir:value [ fhir:v "fhir@lists.hl7.org" ]
     ] )
  ] ) ; # 
  fhir:description [ fhir:v "How data is copied/created."] ; # 
  fhir:jurisdiction ( [
     fhir:coding ( [
       fhir:system [ fhir:v "http://unstats.un.org/unsd/methods/m49/m49.htm"^^xsd:anyURI ] ;
       fhir:code [ fhir:v "001" ] ;
       fhir:display [ fhir:v "World" ]
     ] )
  ] ) ; # 
  fhir:caseSensitive [ fhir:v true] ; # 
  fhir:valueSet [
     fhir:v "http://hl7.org/fhir/ValueSet/map-transform"^^xsd:anyURI ;
     fhir:link <http://hl7.org/fhir/ValueSet/map-transform>
  ] ; # 
  fhir:content [ fhir:v "complete"] ; # 
  fhir:property ( [
     fhir:code [
       fhir:v "fhirpath" ;
       fhir:extension ( [
         fhir:url [ fhir:v "http://hl7.org/fhir/StructureDefinition/rendered-value"^^xsd:anyURI ] ;
         fhir:value [
           a fhir:string ;
           fhir:v "FHIRPath Equivalent"
         ]
       ] )
     ] ;
     fhir:description [ fhir:v "FHIRPath equivalent for transform function" ] ;
     fhir:type [ fhir:v "string" ]
  ] ) ; # 
  fhir:concept ( [
     fhir:code [ fhir:v "create" ] ;
     fhir:display [ fhir:v "create" ] ;
     fhir:definition [ fhir:v "create(type : string) - type is passed through to the application on the standard API, and must be known by it." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "copy" ] ;
     fhir:display [ fhir:v "copy" ] ;
     fhir:definition [ fhir:v "copy(source)." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "truncate" ] ;
     fhir:display [ fhir:v "truncate" ] ;
     fhir:definition [ fhir:v "truncate(source, length) - source must be stringy type." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "substring"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "escape" ] ;
     fhir:display [ fhir:v "escape" ] ;
     fhir:definition [ fhir:v "escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "cast" ] ;
     fhir:display [ fhir:v "cast" ] ;
     fhir:definition [ fhir:v "cast(source, type?) - cast (convert) source from one type to another. Target type can be left as implicit if there is one and only one target type known. The default namespace for the type is 'FHIR' (see [FHIRPath type specifiers](http://hl7.org/fhirpath/N1/#is-type-specifier))" ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "append" ] ;
     fhir:display [ fhir:v "append" ] ;
     fhir:definition [ fhir:v "append(source...) - source is element or string." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "& (String concatenation)"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "translate" ] ;
     fhir:display [ fhir:v "translate" ] ;
     fhir:definition [ fhir:v "translate(source, uri_of_map) - use the translate operation." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "%terminologies.translate()"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "reference" ] ;
     fhir:display [ fhir:v "reference" ] ;
     fhir:definition [ fhir:v "reference(source : object) - return a string that references the provided tree properly." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "related to resolve() but returns the string pointer"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "dateOp" ] ;
     fhir:display [ fhir:v "dateOp" ] ;
     fhir:definition [ fhir:v "Perform a date operation. *Parameters to be documented*." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "uuid" ] ;
     fhir:display [ fhir:v "uuid" ] ;
     fhir:definition [ fhir:v "Generate a random UUID (in lowercase). No Parameters." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "pointer" ] ;
     fhir:display [ fhir:v "pointer" ] ;
     fhir:definition [ fhir:v "Return the appropriate string to put in a reference that refers to the resource provided as a parameter." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "evaluate" ] ;
     fhir:display [ fhir:v "evaluate" ] ;
     fhir:definition [ fhir:v "Execute the supplied FHIRPath expression and use the value returned by that." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "cc" ] ;
     fhir:display [ fhir:v "cc" ] ;
     fhir:definition [ fhir:v "Create a CodeableConcept. Parameters = (text) or (system. Code[, display])." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "c" ] ;
     fhir:display [ fhir:v "c" ] ;
     fhir:definition [ fhir:v "Create a Coding. Parameters = (system. Code[, display])." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "qty" ] ;
     fhir:display [ fhir:v "qty" ] ;
     fhir:definition [ fhir:v "Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "id" ] ;
     fhir:display [ fhir:v "id" ] ;
     fhir:definition [ fhir:v "Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] [
     fhir:code [ fhir:v "cp" ] ;
     fhir:display [ fhir:v "cp" ] ;
     fhir:definition [ fhir:v "Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value." ] ;
     fhir:property ( [
       fhir:code [ fhir:v "fhirpath" ] ;
       fhir:value [
         a fhir:string ;
         fhir:v "n/a"
       ]
     ] )
  ] ) . # 

# -------------------------------------------------------------------------------------

